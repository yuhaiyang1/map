{"version":3,"sources":["logo.svg","app.less","services/index.js","template/chart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","defaults","baseURL","_axios","url","a","params","get","status","data","console","log","success","results","Series","Guide","Line","this","props","height","scale","month","range","forceFit","style","background","marginBottom","name","triggerOn","crosshairs","type","position","size","color","shape","shadowColor","shadowBlur","shadowOffsetY","tooltip","confirmedCount","deadCount","title","value","React","Component","Item","List","App","useState","chartData","setChartData","areaData","setAreaData","useEffect","getTotal","getProvince","Toast","loading","latest","res","map","i","updateTime","moment","format","lastWeeks","push","subtract","list","find","l","hide","getArea","filter","country","compareNum","x","y","sort","f","length","className","s","tip","left","right","aItem","aIndex","cities","toggle","onClick","_areaData","item","index","rowClick","renderHeader","flex","justify","provinceShortName","c","cityName","fontSize","paddingTop","textAlign","cursor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d49ccf85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/app.8dfbca4f.less\";","import axios from 'axios'\naxios.defaults.baseURL = 'https://lab.isaaclin.cn/nCoV/api';\nconst _axios = async (url, params = {}) => {\n   const {status, data = {} } =  await axios.get(url, {\n        params\n    })\n    console.log(status, data)\n    if (status === 200 && data.success) {\n        return data.results\n    }\n    return null\n}\nexport const getAll = (params) =>  _axios('/overall', params)\nexport const getArea = params =>  _axios('/area', params)","import React from 'react';\nimport {\n  G2,\n  Chart,\n  Geom,\n  Axis,\n  Tooltip,\n  Coord,\n  Label,\n  Legend,\n  View,\n  Guide,\n  Shape,\n  Facet,\n  Util,\n} from 'bizcharts';\n\nconst { Line } = Guide;\nexport default class Series extends React.Component {\n  \n  render() {\n    const { data = [] }  = this.props\n    console.log(data, 'data')\n    const cols = {\n      month: {\n        range: [0, 1],\n      },\n    };\n    \n    return (\n        <Chart height={400} data={data} scale={cols} forceFit style={{ background: '#fff', marginBottom: 10 }}>\n        <Axis name=\"updateTime\" />\n        <Axis name=\"confirmedCount\" />\n        <Tooltip\n          triggerOn='mousemove'\n          crosshairs={{\n            type: \"y\"\n          }}\n        />\n        <Geom type=\"line\" position=\"updateTime*confirmedCount\" size={2} \n          color=\"l (270) 0:rgba(255, 146, 255, 1) .5:rgba(100, 268, 255, 1) 1:rgba(215, 0, 255, 1)\"\n          shape=\"smooth\"\n          style={{\n            shadowColor: \"l (270) 0:rgba(21, 146, 255, 0)\",\n            shadowBlur: 60,\n            shadowOffsetY: 6\n          }}\n          tooltip={['confirmedCount*deadCount', (confirmedCount, deadCount) => {\n            return {\n              //自定义 tooltip 上显示的 title 显示内容等。\n              name: '累计确诊',\n              title: '累计死亡：' + deadCount,\n              value: confirmedCount\n            };\n          }]}\n        />\n        {/* <Geom\n          type=\"point\"\n          position=\"updateTime*confirmedCount\"\n          size={4}\n          shape={\"circle\"}\n          style={{\n            stroke: \"#fff\",\n            lineWidth: 1\n          }}\n        /> */}\n      </Chart>\n    );\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { getAll, getArea } from './services'\nimport moment from 'moment'\nimport Chart from './template/chart'\nimport { List, Flex, Icon, Toast } from 'antd-mobile';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport './app.less'\nconst Item = List.Item;\nconst App = () =>  {\n  const [chartData, setChartData] = useState([])\n  const [areaData, setAreaData] = useState([])\n  useEffect(() => {\n    getTotal()\n    getProvince()\n  }, [])\n  const getTotal = async() => {\n    Toast.loading('加载中', 0)\n    let res = await getAll({ latest: 0})\n    res = res.map(i => ({ ...i, updateTime: moment(i.updateTime).format('MM-DD')}))\n    const lastWeeks = []\n    for(let i = 6; i > -1; i--  ) {\n      console.log(i, 'i')\n      lastWeeks.push(moment().subtract(i, 'days').format('MM-DD'))\n    }\n    const list = lastWeeks.map(i => {\n      return {\n        ...res.find(l => l.updateTime === i)\n      }\n    })\n    setChartData(list)\n    Toast.hide()\n  }\n  const getProvince = async() => {\n    let res = await getArea()\n    res = res.filter(i => i.country === '中国')\n    const compareNum = (x,y) => {\n      if(x.confirmedCount<y.confirmedCount){\n        return 1\n      }else if(x.confirmedCount==y.confirmedCount){\n        return 0\n      }else if(x.confirmedCount>y.confirmedCount){\n        return -1\n      }\n    }\n    console.log(res, ';res')\n    res = res.sort((x, y) => compareNum(x, y))\n    setAreaData(res)\n  }\n  const f = chartData.length ? chartData[6] : {}\n  const rowClick = (aIndex) => {\n    const _areaData = areaData.map((item, index) => {\n      if(index === aIndex) {\n        item.toggle = !item.toggle\n      }\n      return item\n    })\n    setAreaData(_areaData)\n  }\n  return (\n    <div className=\"App\">\n      <div style={s.tip}>\n        <span style={s.left}>全国累计确诊{f.confirmedCount}例</span>\n        <span style={s.right}>累计死亡{f.deadCount}例</span>\n      </div>\n      <Chart data={chartData}/>\n      {areaData.map((aItem, aIndex) => {\n        const { cities = [], confirmedCount, deadCount, toggle } = aItem\n        return (\n          <List style={{ background: '#fff', marginBottom: 10}} onClick={() => rowClick(aIndex)} renderHeader={() => <Flex style={s.flex} justify='between'>\n              <div style={s.title}>\n                <span><b>{aItem.provinceShortName}</b> 累计确诊 <span style={s.left}>{confirmedCount} </span>累计死亡 <span style={s.right}>{deadCount}</span></span>\n              </div>\n              <div>\n                { toggle ? <Icon type='up' style={s.flex}/> : <Icon type='down' style={s.flex}/>}\n              </div>\n            </Flex>}>\n            {\n             toggle && cities.map(c => (<Item>\n               <span style={s.item}> {c.cityName} 累计确诊 {c.confirmedCount} 累计死亡 {c.deadCount}</span>\n            </Item>))\n            }\n            </List>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default App\nconst s = {\n  tip: {\n    fontSize: '1.3rem',\n    paddingTop: 15,\n    marginBottom: 15,\n    textAlign: 'center'\n  },\n  left: {\n    color: '#1890ff'\n  },\n  right: {\n    color: 'red'\n  },\n  flex: {\n    cursor: 'pointer',\n  },\n  title: {\n    fontSize: '1rem',\n  },\n  item: {\n    fontSize: '0.9rem',\n    color: '#333'\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}